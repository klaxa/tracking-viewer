import { ScrollView } from "std-widgets.slint";
import { State } from "./global-state.slint";
import { WeekDayData } from "./day-data.slint";


component HourBox inherits Rectangle {
    in-out property<string> text <=> layout.text;
    layout := VerticalLayout {
        property<string> text <=> top.text;
        top := Rectangle {
            height: 50%;
            border-width: 1px;
            border-color: grey;
            property<string> text <=> text.text;
            text := Text {
                color: grey.darker(20%);
            }
        }
        Rectangle {
            height: 50%;
            border-width: 1px;
            border-color: grey;
        }
    }
}

component TaskBox inherits Rectangle {
    in-out property<string> class;
    in-out property<bool> selected;
    in-out property<string> tooltip;
    // this used to work, now it's broken?
    border-width: touch.has-hover ? 2px : 1px;
    border-color: touch.has-hover ? cyan : black;

    /*popup := PopupWindow {
        Rectangle {
            height:100%;
            width: 100%;
            background: yellow;
            border-width: 1px;
            border-color: black;
        }
    }*/

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}

component WeekDayDataColumn inherits Rectangle {
    in property<WeekDayData> data;
    VerticalLayout {
        for i in 24 : HourBox {}
    }
    Rectangle {
        width: 100%;
        height: data.today ? 3px : 1px;
        y: State.now-as-frac * parent.height - (data.today ? 1px : 0);
        background: data.today ? red : red.with_alpha(0.5);
    }
    for task in data.tasks : TaskBox {
        background: task.color;
        width: 50%;
        height: (task.end - task.start) * parent.height;
        class: task.class;
        x: parent.width * 25%;
        y: task.start * parent.height;
    }
}

component TimeColumn inherits Rectangle {
    VerticalLayout {
        for i in [
                    "00", "01", "02", "03", "04", "05",
                    "06", "07", "08", "09", "10", "11",
                    "12", "13", "14", "15", "16", "17",
                    "18", "19", "20", "21", "22", "23",
                 ] : HourBox {
                     width: 5%;
                     text: i + ":00";
                }
    }
}

export component WeekView {
    property<int> current-timestamp <=> State.current-timestamp;
    in-out property<[WeekDayData]> week-day-data;
    width: 100%;
    height: 100%;
    VerticalLayout {
        HorizontalLayout {
            height: 40pt;
            alignment: start;
            spacing: 10pt;
            padding: 4pt;
            Text {
                text: State.month-str;
                font-size: 18pt;
                font-weight: 500;
                color: blue;
            }
            Text {
                text: "week " + State.week;
                font-size: 18pt;
                font-weight: 500;
                color: blue.darker(20%);
            }
        }
        HorizontalLayout {
            Rectangle {
                width: 5%;
                background: white;
            }
            for i in 7 : Rectangle {
                height: 40pt;
                background: white;
                HorizontalLayout {
                    VerticalLayout {
                        Text {
                            text: week-day-data[i].day-of-week-str;
                            horizontal-alignment: center;
                        }
                        Text {
                            text: week-day-data[i].day-of-month;
                            horizontal-alignment: center;
                        }
                    }
                    Rectangle {
                        width: 10%;
                    }
                }
            }
        }
        ScrollView {
            property<float> scale: 2;
            width: 100%;
            viewport-width: self.width - 16px;
            viewport-height: self.height * scale - 16px;
            Rectangle {
                z: -1;
                width: parent.viewport-width;
                height: parent.viewport-height;
                background: white;
            }
            HorizontalLayout {
                TimeColumn {}
                for i in 7 : WeekDayDataColumn {
                    data: root.week-day-data[i];
                }
            }
            TouchArea {
                scroll-event(event) => {
                    if (event.modifiers.control) {
                        if (event.delta-y > 0) {
                            scale = scale * 1 + event.delta-y/100px;
                        }
                        if (event.delta-y < 0 && scale > 1) {
                            scale = max(1, scale * 1 + event.delta-y/100px);
                        }
                        return accept;
                    }
                    reject
                }
            }
        }
    }
}


